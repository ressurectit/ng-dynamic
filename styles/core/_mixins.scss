@use 'sass:meta';
@use 'sass:map';

@use 'buttons';
@use 'global';
@use 'misc';
@use '../components/code-editor' as codeEditor;
@use '../components/code-properties-control' as codePropertiesControl;
@use '../components/components-palette' as componentsPalette;
@use '../components/components-tree-item' as componentsTreeItem;
@use '../components/components-tree' as componentsTree;
@use '../components/content-options' as contentOptions;
@use '../components/grid-panel' as gridPanel;
@use '../components/layout-designer-component' as layoutDesignerComponent;
@use '../components/layout-designer-overlay-for' as layoutDesignerOverlayFor;
@use '../components/layout-editor-drag-preview' as layoutEditorDragPreview;
@use '../components/layout-editor' as layoutEditor;
@use '../components/nodes-palette-item' as nodesPaletteItem;
@use '../components/nodes-palette' as nodesPalette;
@use '../components/not-found-node' as notFoundNode;
@use '../components/package-manager' as packageManager;
@use '../components/placeholder' as placeholder;
@use '../components/properties-editor' as propertiesEditor;
@use '../components/relation-node-input' as relationsNodeInput;
@use '../components/relation-node-output' as relationsNodeOutput;
@use '../components/relations-canvas' as relationsCanvas;
@use '../components/rich-text-block-properties-control' as richTextBlockPropertiesControl;

@mixin buildThemeColors($theme)
{
    --dynamic-font-family: #{map.get($theme, 'font')};
    --dynamic-btn-primary-background: #{map.get(map.get($theme, 'btnPrimary'), 'background')};
    --dynamic-btn-primary-foreground: #{map.get(map.get($theme, 'btnPrimary'), 'foreground')};
    --dynamic-btn-primary-border: #{map.get(map.get($theme, 'btnPrimary'), 'border')};
    --dynamic-btn-info-background: #{map.get(map.get($theme, 'btnInfo'), 'background')};
    --dynamic-btn-info-foreground: #{map.get(map.get($theme, 'btnInfo'), 'foreground')};
    --dynamic-btn-info-border: #{map.get(map.get($theme, 'btnInfo'), 'border')};
    --dynamic-btn-icon-foreground: #{map.get(map.get($theme, 'btnIcon'), 'foreground')};
    --dynamic-form-control-foreground: #{map.get(map.get($theme, 'formControl'), 'foreground')};
    --dynamic-form-control-background: #{map.get(map.get($theme, 'formControl'), 'background')};
    --dynamic-form-control-border: #{map.get(map.get($theme, 'formControl'), 'border')};
    --dynamic-thin-scrollbar: #{map.get($theme, 'scrollbar')};
    --dynamic-drag-placeholder: #{map.get($theme, 'dragPlaceholder')};
    --dynamic-dropzone-overlay-background: #{map.get(map.get($theme, 'dropzoneOverlay'), 'background')};
    --dynamic-layout-designer-component-dragged-background: #{map.get(map.get(map.get($theme, 'layoutDesignerComponent'), 'dragged'), 'background')};
    --dynamic-layout-designer-component-dragged-shadow1: #{map.get(map.get(map.get($theme, 'layoutDesignerComponent'), 'dragged'), 'shadow1')};
    --dynamic-layout-designer-component-dragged-shadow2: #{map.get(map.get(map.get($theme, 'layoutDesignerComponent'), 'dragged'), 'shadow2')};
    --dynamic-layout-designer-component-designer-overlay-border-border: #{map.get(map.get(map.get($theme, 'layoutDesignerComponent'), 'designerOverlayBorder'), 'border')};
    --dynamic-layout-designer-component-designer-dropzone-drag-active-border: #{map.get(map.get(map.get($theme, 'layoutDesignerComponent'), 'designerDropzoneDragActive'), 'border')};
    --dynamic-properties-editor-properties-form-control-foreground: #{map.get(map.get(map.get($theme, 'propertiesEditor'), 'propertiesFormControl'), 'foreground')};
    --dynamic-properties-editor-properties-form-control-border: #{map.get(map.get(map.get($theme, 'propertiesEditor'), 'propertiesFormControl'), 'border')};
    --dynamic-properties-editor-properties-form-control-background: #{map.get(map.get(map.get($theme, 'propertiesEditor'), 'propertiesFormControl'), 'background')};
    --dynamic-properties-editor-properties-main-border: #{map.get(map.get(map.get($theme, 'propertiesEditor'), 'propertiesMain'), 'border')};
    --dynamic-properties-editor-properties-main-background: #{map.get(map.get(map.get($theme, 'propertiesEditor'), 'propertiesMain'), 'background')};
    --dynamic-properties-editor-resize-hover-background: #{map.get(map.get(map.get($theme, 'propertiesEditor'), 'resizerHover'), 'background')};
    --dynamic-properties-editor-properties-header-background: #{map.get(map.get(map.get($theme, 'propertiesEditor'), 'propertiesHeader'), 'background')};
    --dynamic-properties-editor-properties-toolbar-background: #{map.get(map.get(map.get($theme, 'propertiesEditor'), 'propertiesToolbar'), 'background')};
    --dynamic-relations-canvas-background: #{map.get(map.get($theme, 'relationsCanvas'), 'background')};
    --dynamic-relations-canvas-background-gradient1: #{map.get(map.get($theme, 'relationsCanvas'), 'backgroundGradient1')};
    --dynamic-relations-canvas-background-gradient2: #{map.get(map.get($theme, 'relationsCanvas'), 'backgroundGradient2')};
    --dynamic-relations-canvas-relations-node-shadow1: #{map.get(map.get(map.get($theme, 'relationsCanvas'), 'relationsNode'), 'shadow1')};
    --dynamic-relations-canvas-relations-node-shadow2: #{map.get(map.get(map.get($theme, 'relationsCanvas'), 'relationsNode'), 'shadow2')};
    --dynamic-relations-canvas-relations-node-shadow3: #{map.get(map.get(map.get($theme, 'relationsCanvas'), 'relationsNode'), 'shadow3')};
    --dynamic-relations-canvas-relations-node-content-background: #{map.get(map.get(map.get($theme, 'relationsCanvas'), 'relationsNode'), 'contentBackground')};
    --dynamic-relations-canvas-relations-node-header-background: #{map.get(map.get(map.get($theme, 'relationsCanvas'), 'relationsNodeHeader'), 'background')};
    --dynamic-relations-canvas-relations-node-header-foreground: #{map.get(map.get(map.get($theme, 'relationsCanvas'), 'relationsNodeHeader'), 'foreground')};
    --dynamic-relations-canvas-relations-node-header-icon-foreground: #{map.get(map.get(map.get($theme, 'relationsCanvas'), 'relationsNodeHeader'), 'iconForeground')};
    --dynamic-relations-canvas-relations-node-header-icon-foreground-hover: #{map.get(map.get(map.get($theme, 'relationsCanvas'), 'relationsNodeHeader'), 'iconForegroundHover')};
    --dynamic-relations-canvas-relations-node-header-icon-foreground-active: #{map.get(map.get(map.get($theme, 'relationsCanvas'), 'relationsNodeHeader'), 'iconForegroundActive')};
    --dynamic-components-palette-editor-component-border: #{map.get(map.get(map.get($theme, 'componentsPalette'), 'editorComponent'), 'border')};
    --dynamic-components-palette-editor-component-background: #{map.get(map.get(map.get($theme, 'componentsPalette'), 'editorComponent'), 'background')};
    --dynamic-components-tree-background: #{map.get(map.get($theme, 'componentsTree'), 'background')};
    --dynamic-components-tree-border: #{map.get(map.get($theme, 'componentsTree'), 'border')};
    --dynamic-components-tree-item-highlighted-text-shadow: #{map.get(map.get(map.get($theme, 'componentsTreeItem'), 'highlighted'), 'textShadow')};
    --dynamic-components-tree-item-selected-text-shadow: #{map.get(map.get(map.get($theme, 'componentsTreeItem'), 'selected'), 'textShadow')};
    --dynamic-designer-overlay-title-background: #{map.get(map.get($theme, 'designerOverlayTitle'), 'background')};
    --dynamic-designer-overlay-title-foreground: #{map.get(map.get($theme, 'designerOverlayTitle'), 'foreground')};
    --dynamic-designer-overlay-remove-background: #{map.get(map.get($theme, 'designerOverlayRemove'), 'background')};
    --dynamic-designer-overlay-remove-foreground: #{map.get(map.get($theme, 'designerOverlayRemove'), 'foreground')};
    --dynamic-layout-designer-overlay-for-margin-background: #{map.get(map.get($theme, 'layoutDesignerOverlayFor'), 'marginBackground')};
    --dynamic-layout-designer-overlay-for-padding-background: #{map.get(map.get($theme, 'layoutDesignerOverlayFor'), 'paddingBackground')};
    --dynamic-layout-designer-overlay-for-border-background: #{map.get(map.get($theme, 'layoutDesignerOverlayFor'), 'borderBackground')};
    --dynamic-layout-editor-drag-preview-background: #{map.get(map.get($theme, 'layoutEditorDragPreview'), 'background')};
    --dynamic-nodes-palette-editor-component-border: #{map.get(map.get(map.get($theme, 'nodesPalette'), 'editorComponent'), 'border')};
    --dynamic-nodes-palette-editor-component-background: #{map.get(map.get(map.get($theme, 'nodesPalette'), 'editorComponent'), 'background')};
    --dynamic-relation-node-endpoint-background: #{map.get(map.get($theme, 'relationNodeEndpoint'), 'background')};
    --dynamic-relation-node-endpoint-highlighted-shadow: #{map.get(map.get(map.get($theme, 'relationNodeEndpoint'), 'highlighted'), 'shadow')};
    --dynamic-package-manager-border: #{map.get(map.get($theme, 'packageManager'), 'border')};
    --dynamic-not-found-node-text-foreground: #{map.get(map.get(map.get($theme, 'notFoundNode'), 'text'), 'foreground')};
    --dynamic-placeholder-foreground: #{map.get(map.get($theme, 'placeholder'), 'foreground')};
    --dynamic-placeholder-background: #{map.get(map.get($theme, 'placeholder'), 'background')};
}

@mixin buildThemeCss
{
    @include misc.misc;
    @include misc.generate-margin-padding('margin', (none: 0, extra-small: 4px, small: 10px, medium: 15px, big: 20px));
    @include misc.thin-scrollbar('--dynamic-thin-scrollbar');
    @include misc.overrides;
    @include global.dropzone-overlay;
    @include buttons.btn;
    @include buttons.btn-primary;
    @include buttons.btn-info;
    @include buttons.btn-icon;
    @include codeEditor.css;
    @include codePropertiesControl.css;
    @include componentsPalette.css;
    @include componentsTreeItem.css;
    @include componentsTree.css;
    @include contentOptions.css;
    @include gridPanel.css;
    @include layoutDesignerComponent.css;
    @include layoutDesignerOverlayFor.css;
    @include layoutEditorDragPreview.css;
    @include layoutEditor.css;
    @include nodesPaletteItem.css;
    @include nodesPalette.css;
    @include notFoundNode.css;
    @include packageManager.css;
    @include placeholder.css;
    @include propertiesEditor.css;
    @include relationsNodeInput.css;
    @include relationsNodeOutput.css;
    @include relationsCanvas.css;
    @include richTextBlockPropertiesControl.css;
}

@mixin buildTheme($theme)
{
    @include buildThemeColors($theme);
    @include buildThemeCss;
}